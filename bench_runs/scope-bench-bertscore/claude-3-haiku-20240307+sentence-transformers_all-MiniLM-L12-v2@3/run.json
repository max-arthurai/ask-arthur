{"id": "3456f267-feb9-4229-bd31-d4fe7d138b23", "name": "claude-3-haiku-20240307+sentence-transformers_all-MiniLM-L12-v2@3", "test_suite_id": "4feac22d-31c1-42a0-b252-1adca2000ebf", "test_cases": [{"id": "dfdd97cc-9df7-4d98-a306-0f48214d7d27", "output": "Based on the provided context, the following enrichments are available in Arthur:\n\n1. Anomaly Detection: Arthur can detect anomalies in your model's performance and data.\n2. Bias Mitigation: Arthur provides capabilities to identify and mitigate biases in your models.\n3. Explainability: Arthur can provide explanations for your model's predictions to help understand its behavior.\n\nThe context does not provide detailed information about other specific enrichments available in Arthur. However, it mentions that Arthur is an enterprise AI solution for monitoring, compliance, analysis, and development of AI applications, so it likely has additional enrichment capabilities beyond the ones listed above.", "score": 0.48609045147895813, "input": null, "reference_output": null, "score_result": {"score": 0.48609045147895813, "category": null}}, {"id": "51d72f8a-c329-469e-a00d-7ab12ec66087", "output": "Based on the context provided, the document does not mention any specific model types that do not allow explainability. The focus of the document is on model schemas within the MLOps ecosystem, and it does not discuss the explainability of different model types. The context does not contain information to answer this question directly.", "score": 0.6152013540267944, "input": null, "reference_output": null, "score_result": {"score": 0.6152013540267944, "category": null}}, {"id": "5aba4ddc-2962-412b-9dd0-3f14954786a2", "output": "Based on the provided context, the Arthur platform supports the following enrichments for object detection models:\n\n1. Anomaly Detection: Arthur can detect anomalies in the object detection outputs, such as unexpected objects or changes in the detected objects over time.\n2. Bias Mitigation: Arthur can help identify and mitigate biases in the object detection model outputs.\n3. Explainability: Arthur provides explainability features to help understand the model's decision-making process for object detection.\n\nThe context does not provide any example Python code, as the question is asking about the available enrichments rather than specific implementation details.", "score": 0.5389345288276672, "input": null, "reference_output": null, "score_result": {"score": 0.5389345288276672, "category": null}}, {"id": "c5142157-54c1-4f56-a2e5-21202a2e20fb", "output": "Based on the provided context, the following enrichments are available for tabular multiclass classification models in Arthur:\n\n- Anomaly Detection\n- Hot Spots \n- Explainability\n- Bias Mitigation\n\nThe context mentions that these enrichments can be enabled for multiclass classification model types in Arthur.", "score": 0.5876333713531494, "input": null, "reference_output": null, "score_result": {"score": 0.5876333713531494, "category": null}}, {"id": "7fa1360f-9632-44d7-8868-6d5b45d1f1d1", "output": "Unfortunately, the provided context does not contain any information about restoring deleted Arthur models. The Arthur Scope FAQ document covers various topics related to using the Arthur platform, but does not mention anything about restoring deleted models. Without additional information or documentation on the Arthur platform's model management capabilities, I cannot provide a definitive answer to this question.", "score": 0.5297735333442688, "input": null, "reference_output": null, "score_result": {"score": 0.5297735333442688, "category": null}}, {"id": "a3688edd-c062-4d5d-8542-c526075e8785", "output": "Based on the provided context, the Arthur Scope FAQ does not mention anything about alert levels. The FAQ covers topics such as using Arthur without the Python SDK, model access, data security, ground truth labels, SDK errors, credentials, and data drift metrics, but does not discuss alert levels. Therefore, I cannot provide a brief answer to the question \"What are the two alert levels available in Arthur?\" from the given context.", "score": 0.5699922442436218, "input": null, "reference_output": null, "score_result": {"score": 0.5699922442436218, "category": null}}, {"id": "0c2c9c1a-7769-4c81-b695-7388ddcbbf4e", "output": "Based on the provided context, the additional requirements for on-prem deployment in airgapped mode are:\n\n1. The Kubernetes cluster must have access to a local container registry, as the cluster will not have access to the internet to pull container images.\n2. The Kubernetes cluster must have access to a local PyPI/Conda registry to ensure optimal utilization of the platform's features.\n3. All required artifacts, including the KOTS CLI installer and plugins, must be downloaded and made available locally, as the cluster will not have internet access.", "score": 0.6197787523269653, "input": null, "reference_output": null, "score_result": {"score": 0.6197787523269653, "category": null}}, {"id": "c265c857-9311-49d2-9b89-24603aaab946", "output": "To enable explainability for your model in Arthur, you will need to provide access to your model's `predict()` function. Specifically, you will need to provide the following assets:\n\n1. The model's `predict()` function - This allows Arthur to access the model and generate explanations for its predictions.\n2. Any necessary dependencies or libraries required by the model's `predict()` function.\n\nWith these assets, Arthur can integrate with your model and provide explainability features, such as generating feature importance explanations for the model's predictions.", "score": 0.5581693649291992, "input": null, "reference_output": null, "score_result": {"score": 0.5581693649291992, "category": null}}, {"id": "9d51a3ac-a7cb-4b13-92f6-a137c59d409a", "output": "Based on the provided context, there is no mention of KMS (Key Management Service) being required for Arthur's backup and restore capability. The document focuses on the steps to restore various components of the Arthur platform, such as the RDS Postgres database, ClickHouse data, messaging infrastructure, and enrichments, without any specific references to KMS.", "score": 0.49567535519599915, "input": null, "reference_output": null, "score_result": {"score": 0.49567535519599915, "category": null}}, {"id": "b32f4653-bad2-4180-8afc-b04bc0b53323", "output": "Unfortunately, the provided context does not contain any information about benchmarking scorers for evaluating LLMs at writing summaries. The context is focused on explaining token likelihood, which is a metric for understanding the confidence of an LLM in its predicted tokens, but it does not mention any specific benchmarking tools or scorers for evaluating LLM performance on summarization tasks. Without additional context about LLM summarization evaluation, I cannot provide a meaningful answer to the question.", "score": 0.4486818015575409, "input": null, "reference_output": null, "score_result": {"score": 0.4486818015575409, "category": null}}, {"id": "5e742e10-1dcd-43b0-9d5a-b0227a8bfc3d", "output": "Based on the context provided, Arthur will be including a scoring workflow in their open-source evaluation tool, Arthur Bench, to evaluate LLM responses to questions. The procedure they followed to manually evaluate the LLM responses in their dataset will be included as a scoring workflow in Arthur Bench, which can be used for comparing LLMs, prompts, and hyperparameters for generative text models.", "score": 0.3960736393928528, "input": null, "reference_output": null, "score_result": {"score": 0.3960736393928528, "category": null}}, {"id": "0ba7dcb4-e439-418f-b09d-24a120339ddc", "output": "The Bench documentation does not explicitly mention scorers for evaluating LLMs at coding tasks. However, the Bench package provides a few scorers that could be useful for this purpose:\n\n1. **ExactMatch**: This scorer can be used to check if the candidate output exactly matches the reference output, including case sensitivity. This could be useful for evaluating LLM outputs on simple coding tasks with known correct answers.\n\n2. **Custom Scorers**: The Bench documentation mentions that users can create their own custom scorers. This could allow you to develop more sophisticated scoring mechanisms tailored to evaluating LLM performance on coding tasks, such as checking for correct syntax, logical structure, or adherence to best practices.\n\nTo use these scorers for evaluating LLMs on coding tasks, you would need to create a test suite with the appropriate input text (coding prompts) and reference outputs (expected solutions). You can then run the test suite and analyze the scores to assess the LLM's performance.", "score": 0.5055458545684814, "input": null, "reference_output": null, "score_result": {"score": 0.5055458545684814, "category": null}}, {"id": "05adad2b-eecc-422e-8877-1868229f1565", "output": "To view your Bench test results, you have two options:\n\n1. Local setup:\n   - Ensure the `BENCH_FILE_DIR` environment variable is set to the location of your test run data.\n   - Run the `bench` command from the command line to launch the local Bench UI.\n   - The local UI will provide a visual interface to view and explore your test results.\n\n2. SaaS (Coming Soon!):\n   - Set the environment variables `ARTHUR_BENCH_AUTOLOG`, `ARTHUR_API_URL`, and `ARTHUR_API_KEY` to connect to the Arthur platform.\n   - Your test results will be automatically logged to the Arthur platform, which will provide a web-based interface to view and analyze your test data.\n\nThe documentation provides examples for both the local and SaaS setup options to help you get started with viewing your Bench test results.", "score": 0.6949473023414612, "input": null, "reference_output": null, "score_result": {"score": 0.6949473023414612, "category": null}}, {"id": "e0af19dd-7279-4fbe-8a91-e87d36c31a69", "output": "The key difference between Bench test suites and test runs is:\n\n1. Test Suites: A test suite is the overall collection of test cases that you want to evaluate your AI model or application against. It defines the input data, reference outputs, and scoring metrics to be used.\n\n2. Test Runs: A test run is the execution of a test suite against a specific candidate model or application. When you run a test suite, you provide the candidate outputs that you want to evaluate, and the test run will score those outputs against the reference data defined in the test suite.\n\nIn summary, the test suite defines the overall test framework, while the test run executes that framework against a specific candidate to generate performance metrics and results. You can run multiple test runs against the same test suite to compare different models or configurations.", "score": 0.6425330638885498, "input": null, "reference_output": null, "score_result": {"score": 0.6425330638885498, "category": null}}], "updated_at": "2024-03-26T15:31:47.974471", "created_at": "2024-03-26T15:31:47.974471", "page": null, "page_size": null, "total_pages": null, "total_count": null}