{"id": "2fdd252d-4850-45a4-b5ae-424f3e5fbf59", "name": "claude-3-haiku-20240307+sentence-transformers_all-MiniLM-L12-v2@1", "test_suite_id": "4feac22d-31c1-42a0-b252-1adca2000ebf", "test_cases": [{"id": "dfdd97cc-9df7-4d98-a306-0f48214d7d27", "output": "Based on the provided context, the following enrichments are available in Arthur:\n\n1. Anomaly Detection: Arthur can detect anomalies in your model's performance and data.\n2. Bias Mitigation: Arthur can help mitigate biases in your model's predictions.\n3. Explainability: Arthur can provide explanations for your model's predictions.\n\nThe context does not provide detailed information about other enrichments that may be available in Arthur.", "score": 0.4946339726448059, "input": null, "reference_output": null, "score_result": {"score": 0.4946339726448059, "category": null}}, {"id": "51d72f8a-c329-469e-a00d-7ab12ec66087", "output": "Based on the context provided, the document does not mention any specific model types that do not allow explainability. The focus of the document is on model schemas within the MLOps ecosystem, and it does not discuss the explainability of different model types. The context does not contain information to answer this question directly.", "score": 0.6152013540267944, "input": null, "reference_output": null, "score_result": {"score": 0.6152013540267944, "category": null}}, {"id": "5aba4ddc-2962-412b-9dd0-3f14954786a2", "output": "Based on the provided context, the Arthur platform supports the following enrichments for object detection models:\n\n1. Anomaly Detection: Arthur can detect anomalies in the object detection outputs, such as unexpected objects or changes in the detected objects over time.\n2. Bias Mitigation: Arthur can help identify and mitigate biases in the object detection model, ensuring fair and unbiased performance.\n3. Explainability: Arthur provides explainability features to help understand the model's decision-making process for object detection tasks.\n\nThe context does not provide any example Python code, as the question is asking about the available enrichments rather than specific implementation details.", "score": 0.5380648374557495, "input": null, "reference_output": null, "score_result": {"score": 0.5380648374557495, "category": null}}, {"id": "c5142157-54c1-4f56-a2e5-21202a2e20fb", "output": "Based on the provided context, the following enrichments are available for tabular multiclass classification models in Arthur:\n\n- Anomaly Detection\n- Hot Spots \n- Explainability\n- Bias Mitigation\n\nThe context states that these enrichments can be enabled for multiclass classification model types in Arthur.", "score": 0.5875673890113831, "input": null, "reference_output": null, "score_result": {"score": 0.5875673890113831, "category": null}}, {"id": "7fa1360f-9632-44d7-8868-6d5b45d1f1d1", "output": "Unfortunately, the provided context does not contain any information about restoring deleted Arthur models. The Arthur Scope FAQ document covers various topics related to using the Arthur platform, but does not mention anything about restoring deleted models. Without additional information or documentation on the Arthur platform's model management capabilities, I cannot provide a detailed answer to this question.", "score": 0.5320003032684326, "input": null, "reference_output": null, "score_result": {"score": 0.5320003032684326, "category": null}}, {"id": "a3688edd-c062-4d5d-8542-c526075e8785", "output": "Based on the provided context, the Arthur Scope FAQ does not mention anything about alert levels. The context focuses on general questions about using Arthur Scope, such as using the platform without the Python SDK, handling proprietary data, working with ground truth labels, and using the SDK. There is no information about the specific alert levels available in Arthur.", "score": 0.5412151217460632, "input": null, "reference_output": null, "score_result": {"score": 0.5412151217460632, "category": null}}, {"id": "0c2c9c1a-7769-4c81-b695-7388ddcbbf4e", "output": "Based on the provided context, the additional requirements for on-prem deployment in airgapped mode are:\n\n1. The Kubernetes cluster must have access to a local container registry and PyPI/Conda registry, as the cluster will not have internet access to pull images and packages from public registries.\n2. The SysAdmin performing the installation must have read/write access to the local container registry.\n3. All required artifacts, including the KOTS CLI installer and plugins, must be downloaded and made available locally, as the cluster will not have internet access to download them.", "score": 0.6223025321960449, "input": null, "reference_output": null, "score_result": {"score": 0.6223025321960449, "category": null}}, {"id": "c265c857-9311-49d2-9b89-24603aaab946", "output": "To enable explainability for your model in Arthur, you will need to provide access to your model's `predict` function. Specifically, you will need to provide the following assets:\n\n1. The model's `predict` function - This allows Arthur to access the inner workings of your model and generate explanations for its predictions.\n2. Any necessary dependencies or libraries required by your model's `predict` function.\n\nWith these assets, Arthur can integrate with your model and generate detailed explanations for the model's predictions, providing valuable insights into how the model is making decisions.", "score": 0.5586880445480347, "input": null, "reference_output": null, "score_result": {"score": 0.5586880445480347, "category": null}}, {"id": "9d51a3ac-a7cb-4b13-92f6-a137c59d409a", "output": "The provided context does not mention anything about KMS (Key Management Service) being required for Arthur's backup and restore capability. The document focuses on the steps to restore various components of the Arthur platform, such as the RDS Postgres database, ClickHouse data, messaging infrastructure, and enrichments, but does not discuss any KMS requirements.", "score": 0.49622222781181335, "input": null, "reference_output": null, "score_result": {"score": 0.49622222781181335, "category": null}}, {"id": "b32f4653-bad2-4180-8afc-b04bc0b53323", "output": "Unfortunately, the provided context does not contain any information about benchmarking scorers for evaluating LLMs at writing summaries. The context is focused on explaining token likelihood, which is a metric for understanding the confidence of an LLM in its predicted tokens, but it does not mention any specific benchmarking tools or scorers for evaluating LLM performance on summarization tasks. Without additional context about LLM summarization evaluation, I cannot provide a meaningful answer to the question.", "score": 0.4486818015575409, "input": null, "reference_output": null, "score_result": {"score": 0.4486818015575409, "category": null}}, {"id": "5e742e10-1dcd-43b0-9d5a-b0227a8bfc3d", "output": "Based on the context provided, Arthur will be including a scoring workflow in their open-source evaluation tool, Arthur Bench, to evaluate LLM responses to questions. The procedure they followed to manually evaluate the LLM responses in their dataset will be included as a scoring workflow in Arthur Bench, which can be used for comparing LLMs, prompts, and hyperparameters for generative text models.", "score": 0.3960736393928528, "input": null, "reference_output": null, "score_result": {"score": 0.3960736393928528, "category": null}}, {"id": "0ba7dcb4-e439-418f-b09d-24a120339ddc", "output": "The Bench documentation does not explicitly mention scorers for evaluating LLMs at coding tasks. However, the Bench package provides the `ExactMatch` scorer, which can be used to compare the candidate output to a reference output. This scorer can be useful for evaluating the correctness of code generated by LLMs. \n\nAdditionally, the documentation mentions that Bench supports creating custom scorers, which could be developed to evaluate the quality and correctness of code generated by LLMs. The \"Custom Scoring\" guide in the Bench documentation provides more information on how to create custom scorers.", "score": 0.4720785319805145, "input": null, "reference_output": null, "score_result": {"score": 0.4720785319805145, "category": null}}, {"id": "05adad2b-eecc-422e-8877-1868229f1565", "output": "To view your Bench test results, you have two options:\n\n1. Local setup:\n   - Ensure the `BENCH_FILE_DIR` environment variable is set to the location of your test run data.\n   - Run the `bench` command from the command line to launch the local Bench UI.\n   - The local UI will provide a visual interface to view and explore your test results.\n\n2. SaaS (Coming Soon):\n   - Set the environment variables `ARTHUR_BENCH_AUTOLOG`, `ARTHUR_API_URL`, and `ARTHUR_API_KEY` to connect to the Arthur platform.\n   - Your test results will be automatically logged to the Arthur platform, which will host the Bench server and provide a web-based UI to view and analyze your results.\n\nThe documentation provides examples for both the local and SaaS setup options to help you get started with viewing your Bench test results.", "score": 0.6952226758003235, "input": null, "reference_output": null, "score_result": {"score": 0.6952226758003235, "category": null}}, {"id": "e0af19dd-7279-4fbe-8a91-e87d36c31a69", "output": "The main difference between Bench test suites and test runs is:\n\n1. Test Suites: A test suite is a collection of test cases that are designed to evaluate the performance and behavior of an AI model or application. It defines the input data, reference outputs, and the scoring metrics to be used.\n\n2. Test Runs: A test run is the execution of a test suite against a specific candidate model or application. It generates the candidate outputs and compares them to the reference outputs using the specified scoring metrics.\n\nIn summary, a test suite defines the test cases and evaluation criteria, while a test run executes the test suite against a candidate model and produces the performance results. You can create multiple test runs for a single test suite to compare the performance of different models or configurations.", "score": 0.6420645713806152, "input": null, "reference_output": null, "score_result": {"score": 0.6420645713806152, "category": null}}], "updated_at": "2024-03-26T15:31:46.977028", "created_at": "2024-03-26T15:31:46.977028", "page": null, "page_size": null, "total_pages": null, "total_count": null}