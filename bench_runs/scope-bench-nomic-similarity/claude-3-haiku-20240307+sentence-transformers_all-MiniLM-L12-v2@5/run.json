{"id": "513950f3-cf47-4310-a863-4a8d66173197", "name": "claude-3-haiku-20240307+sentence-transformers_all-MiniLM-L12-v2@5", "test_suite_id": "1c594684-5fd1-4bba-b209-d6c321bc01ac", "test_cases": [{"id": "6631fb8f-c16e-4b51-9bdb-e46dc35dbe1f", "output": "Based on the provided context, the following enrichments are available in Arthur:\n\n1. Anomaly Detection: Arthur can detect anomalies in your model's performance and data.\n2. Bias Mitigation: Arthur can help mitigate biases in your model's predictions.\n3. Explainability: Arthur can provide explanations for your model's predictions.\n\nThe context does not provide detailed information about other enrichments that may be available in Arthur.", "score": 0.8996039628982544, "input": null, "reference_output": null, "score_result": {"score": 0.8996039628982544, "category": null}}, {"id": "12245a16-8cc3-4cad-a0df-8d65b2ccdbb4", "output": "Based on the context provided, the document does not mention any specific model types that do not allow explainability. The focus of the document is on model schemas within the MLOps ecosystem, and it does not discuss the explainability of different model types. The context does not contain information to answer the question \"What model types do not allow explainability?\".", "score": 0.8233445882797241, "input": null, "reference_output": null, "score_result": {"score": 0.8233445882797241, "category": null}}, {"id": "907e435b-f3d1-4201-bdf3-a514a8975b2d", "output": "Based on the provided context, the Arthur platform supports the following enrichments for object detection models:\n\n1. Anomaly Detection: Arthur can detect anomalies in the object detection outputs, such as unexpected objects or changes in the detected objects over time.\n2. Bias Mitigation: Arthur can help identify and mitigate biases in the object detection model outputs.\n3. Explainability: Arthur provides explainability features to help understand the model's decision-making process for object detection.\n\nThe context does not provide any example Python code, as the question is asking about the available enrichments rather than implementation details.", "score": 0.8128327131271362, "input": null, "reference_output": null, "score_result": {"score": 0.8128327131271362, "category": null}}, {"id": "22d619b4-c43b-4d17-9dd5-1c3d9e81b44a", "output": "Based on the provided context, the following enrichments are available for tabular multiclass classification models in Arthur:\n\n- Anomaly Detection\n- Hot Spots \n- Explainability\n- Bias Mitigation\n\nThe context mentions that these enrichments can be enabled for multiclass classification model types in Arthur.", "score": 0.7531099915504456, "input": null, "reference_output": null, "score_result": {"score": 0.7531099915504456, "category": null}}, {"id": "c30d8faf-8e01-4e50-b93c-e633c9da7fd1", "output": "Unfortunately, the provided context does not contain any information about restoring deleted Arthur models. The Arthur Scope FAQ covers topics such as using Arthur without the Python SDK, model access requirements, data security, handling missing ground truth labels, and troubleshooting SDK errors, but it does not mention anything about restoring deleted models. Without additional context or documentation on the Arthur platform's model management capabilities, I cannot provide a substantive answer to this question.", "score": 0.8532478213310242, "input": null, "reference_output": null, "score_result": {"score": 0.8532478213310242, "category": null}}, {"id": "e9bc0fdf-b920-48eb-bce7-9d10b050a664", "output": "Based on the provided context, the Arthur Scope FAQ does not mention anything about alert levels. The FAQ covers topics such as using Arthur without the Python SDK, model access, data security, ground truth labels, SDK errors, credentials, and data drift metrics, but does not discuss alert levels. Therefore, I cannot provide a brief answer to the question \"What are the two alert levels available in Arthur?\" from the given context.", "score": 0.8149166107177734, "input": null, "reference_output": null, "score_result": {"score": 0.8149166107177734, "category": null}}, {"id": "4040ca43-f1db-4111-9df4-124ef94eea08", "output": "Based on the provided context, the additional requirements for on-prem deployment in airgapped mode are:\n\n1. The Kubernetes cluster must have access to a local container registry, as the cluster will not have access to the internet to pull container images.\n2. The Kubernetes cluster must have access to a local PyPI/Conda registry to ensure optimal utilization of the platform's features.\n3. All required artifacts for installing the Arthur platform must be downloaded and made available locally, as the cluster will not have access to the internet.", "score": 0.8288059234619141, "input": null, "reference_output": null, "score_result": {"score": 0.8288059234619141, "category": null}}, {"id": "498e6ba4-c53d-405d-88bd-88b27aa1106f", "output": "To enable explainability for your model in Arthur, you will need to provide access to your model's `predict()` function. Specifically, you will need to provide the following assets:\n\n1. The model's `predict()` function - This allows Arthur to generate explanations for the model's predictions.\n2. Any necessary dependencies or libraries required by the `predict()` function - This ensures Arthur can properly execute the `predict()` function.\n\nWith these assets, Arthur can generate explanations for your model's predictions, such as feature importance, partial dependence plots, and other explainability insights.", "score": 0.8910717964172363, "input": null, "reference_output": null, "score_result": {"score": 0.8910717964172363, "category": null}}, {"id": "3c216b5e-f6ea-41c6-933a-a20d4bf59e08", "output": "Based on the provided context, there is no mention of KMS (Key Management Service) being required for Arthur's backup and restore capability. The document focuses on the steps to restore various components of the Arthur platform, such as the RDS Postgres database, ClickHouse data, messaging infrastructure, and enrichments, without any specific references to KMS.", "score": 0.7210307717323303, "input": null, "reference_output": null, "score_result": {"score": 0.7210307717323303, "category": null}}, {"id": "9e8c3e89-6a0c-4ae3-85d6-7a141c9bdcfe", "output": "Unfortunately, the provided context does not contain any information about benchmarking scorers for evaluating LLMs at writing summaries. The context is focused on explaining token likelihood, which is a metric for understanding the confidence of an LLM's predictions, but it does not mention any specific benchmarking tools or scorers for evaluating summarization capabilities. Without additional context about summarization benchmarks, I cannot provide a meaningful answer to your question.", "score": 0.7787810564041138, "input": null, "reference_output": null, "score_result": {"score": 0.7787810564041138, "category": null}}, {"id": "1925c2f0-86e8-4e5c-8c5c-572775db7beb", "output": "Based on the context provided, Arthur will be including a scoring workflow in their open-source evaluation tool, Arthur Bench, to evaluate LLM responses to questions. The procedure they followed to manually evaluate the LLM responses in their dataset will be included as a scoring workflow in Arthur Bench, which can be used for comparing LLMs, prompts, and hyperparameters for generative text models.", "score": 0.7604497671127319, "input": null, "reference_output": null, "score_result": {"score": 0.7604497671127319, "category": null}}, {"id": "93e6a397-63d3-4678-bb58-42e192ed38c5", "output": "The Bench documentation mentions that you can use the `ExactMatch` scorer to evaluate LLM outputs, and you can configure it to be case-insensitive. Additionally, the documentation states that Bench supports creating custom scorers, which can provide even more flexibility for evaluating LLM performance on coding tasks. To learn more about creating custom scorers, you can refer to the \"Custom Scoring\" guide in the Bench documentation.", "score": 0.7653365731239319, "input": null, "reference_output": null, "score_result": {"score": 0.7653365731239319, "category": null}}, {"id": "67293353-3c84-4967-810d-ee179a1ae002", "output": "To view your Bench test results, you have two options:\n\n1. Local setup:\n   - Ensure the `BENCH_FILE_DIR` environment variable is set to the location of your test run data.\n   - Run the `bench` command from the command line to launch the local Bench UI.\n   - The local UI will provide a visual interface to view and explore your test results.\n\n2. SaaS (Coming Soon!):\n   - Set the environment variables `ARTHUR_BENCH_AUTOLOG`, `ARTHUR_API_URL`, and `ARTHUR_API_KEY` to connect to the Arthur platform.\n   - Your test results will be automatically logged to the Arthur platform, which will provide a web-based interface to view and analyze your test data.\n\nThe documentation provides more details on both the local and SaaS options for viewing your Bench test results.", "score": 0.8485774993896484, "input": null, "reference_output": null, "score_result": {"score": 0.8485774993896484, "category": null}}, {"id": "bb8aa841-074e-4b8f-aa62-ea33d91280bd", "output": "The main difference between Bench test suites and test runs is:\n\n1. Test Suites: A test suite is a collection of test cases that are designed to evaluate the performance and behavior of an AI model or application. It defines the input data, reference outputs, and the scoring metrics to be used for evaluation.\n\n2. Test Runs: A test run is the execution of a test suite against a specific candidate model or application. It generates the candidate outputs and compares them to the reference outputs using the specified scoring metrics. The results of the test run are then reported and analyzed.\n\nIn summary, a test suite defines the test cases and evaluation criteria, while a test run executes the test suite against a candidate model and produces the performance results. The test suite is the blueprint, and the test run is the actual execution and evaluation.", "score": 0.7848923206329346, "input": null, "reference_output": null, "score_result": {"score": 0.7848923206329346, "category": null}}], "updated_at": "2024-03-26T16:07:35.169817", "created_at": "2024-03-26T16:07:35.169817", "page": null, "page_size": null, "total_pages": null, "total_count": null}