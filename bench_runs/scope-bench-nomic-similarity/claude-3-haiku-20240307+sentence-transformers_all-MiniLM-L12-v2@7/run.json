{"id": "fce21dc3-b138-49ad-8878-8ab3bb78fea9", "name": "claude-3-haiku-20240307+sentence-transformers_all-MiniLM-L12-v2@7", "test_suite_id": "1c594684-5fd1-4bba-b209-d6c321bc01ac", "test_cases": [{"id": "6631fb8f-c16e-4b51-9bdb-e46dc35dbe1f", "output": "Based on the provided context, the following enrichments are available in Arthur:\n\n- Anomaly Detection\n- Bias Mitigation\n- Explainability\n- Hot Spots\n- Token Likelihood\n\nThe context mentions that these enrichments can be enabled when registering a model with the Arthur API.", "score": 0.9066019058227539, "input": null, "reference_output": null, "score_result": {"score": 0.9066019058227539, "category": null}}, {"id": "12245a16-8cc3-4cad-a0df-8d65b2ccdbb4", "output": "Based on the context provided, the document does not mention any specific model types that do not allow explainability. The focus of the document is on model schemas within the MLOps ecosystem, and it does not discuss the explainability of different model types. The context does not contain information to answer the question \"What model types do not allow explainability?\".", "score": 0.8233445882797241, "input": null, "reference_output": null, "score_result": {"score": 0.8233445882797241, "category": null}}, {"id": "907e435b-f3d1-4201-bdf3-a514a8975b2d", "output": "Based on the provided context, the Arthur platform supports the following enrichments for object detection models:\n\n1. Anomaly Detection: Arthur can detect anomalies in the object detection outputs, such as unexpected objects or changes in the detected objects over time.\n2. Bias Mitigation: Arthur can help identify and mitigate biases in the object detection model, ensuring fair and unbiased performance.\n3. Explainability: Arthur provides explainability features to help understand the model's decision-making process for object detection tasks.\n\nThe context does not provide any example Python code, as the question is asking about the available enrichments rather than specific implementation details.", "score": 0.8166574835777283, "input": null, "reference_output": null, "score_result": {"score": 0.8166574835777283, "category": null}}, {"id": "22d619b4-c43b-4d17-9dd5-1c3d9e81b44a", "output": "Based on the context provided, the following enrichments are available for tabular multiclass classification models in Arthur:\n\n- Anomaly Detection\n- Hot Spots \n- Explainability\n- Bias Mitigation\n\nThe context mentions that these enrichments can be enabled for multiclass classification model types in Arthur.", "score": 0.7551441788673401, "input": null, "reference_output": null, "score_result": {"score": 0.7551441788673401, "category": null}}, {"id": "c30d8faf-8e01-4e50-b93c-e633c9da7fd1", "output": "Unfortunately, the provided context does not contain any information about restoring deleted Arthur models. The Arthur Scope FAQ covers topics such as using the platform without the Python SDK, model access requirements, data security, handling missing ground truth labels, and troubleshooting SDK errors, but it does not mention anything about restoring deleted models. Without additional context or documentation on the Arthur platform's model management capabilities, I cannot provide a substantive answer to this question.", "score": 0.8508010506629944, "input": null, "reference_output": null, "score_result": {"score": 0.8508010506629944, "category": null}}, {"id": "e9bc0fdf-b920-48eb-bce7-9d10b050a664", "output": "Based on the provided context, the Arthur Scope FAQ does not mention anything about alert levels. The FAQ covers topics such as using Arthur without the Python SDK, model access requirements, handling proprietary data, handling missing ground truth labels, troubleshooting SDK errors, authentication, and model types. There is no information about the available alert levels in Arthur.", "score": 0.7913641333580017, "input": null, "reference_output": null, "score_result": {"score": 0.7913641333580017, "category": null}}, {"id": "4040ca43-f1db-4111-9df4-124ef94eea08", "output": "Based on the provided context, the key additional requirements for on-prem deployment in airgapped mode are:\n\n1. The Kubernetes cluster must have access to a local container registry, as the cluster will not have access to the internet to pull container images.\n2. The Kubernetes cluster must have access to a local PyPI/Conda registry to ensure optimal utilization of platform features.\n3. All required artifacts, including the KOTS CLI installer and plugins, must be downloaded and made available locally, as the cluster will not have internet access.", "score": 0.826380729675293, "input": null, "reference_output": null, "score_result": {"score": 0.826380729675293, "category": null}}, {"id": "498e6ba4-c53d-405d-88bd-88b27aa1106f", "output": "To enable explainability for your model in Arthur, you will need to provide access to your model's `predict()` function. Specifically, you need to provide the following assets required for explainability:\n\n1. The `predict()` function of your model, which takes the model inputs and returns the model outputs.\n2. Any additional dependencies or libraries required to run your model's `predict()` function.\n\nBy providing these assets, Arthur can access your model and generate explanations for the model's predictions.", "score": 0.8961057662963867, "input": null, "reference_output": null, "score_result": {"score": 0.8961057662963867, "category": null}}, {"id": "3c216b5e-f6ea-41c6-933a-a20d4bf59e08", "output": "Based on the provided context, there is no mention of KMS (Key Management Service) being required for Arthur's backup and restore capability. The document focuses on the steps to restore various components of the Arthur platform, such as the RDS Postgres database, ClickHouse data, messaging infrastructure, and enrichments, without any references to KMS.", "score": 0.7208437919616699, "input": null, "reference_output": null, "score_result": {"score": 0.7208437919616699, "category": null}}, {"id": "9e8c3e89-6a0c-4ae3-85d6-7a141c9bdcfe", "output": "Unfortunately, the provided context does not contain any information about benchmarking scorers for evaluating LLMs at writing summaries. The context is focused on explaining token likelihood, which is a metric for understanding the confidence of an LLM's predictions, but it does not mention any specific benchmarking tools or metrics for evaluating LLM performance on summarization tasks. Without additional context about LLM evaluation for summarization, I cannot provide a meaningful answer to the question.", "score": 0.7892546653747559, "input": null, "reference_output": null, "score_result": {"score": 0.7892546653747559, "category": null}}, {"id": "1925c2f0-86e8-4e5c-8c5c-572775db7beb", "output": "Based on the context provided, the Arthur team mentions that the procedure they followed to manually evaluate the LLM responses in their dataset will be included as a scoring workflow in Arthur Bench, an open-source evaluation tool for comparing LLMs, prompts, and hyperparameters for generative text models. Therefore, the Bench scorer you can use for evaluating LLMs at answering questions is the one that will be provided as part of the Arthur Bench tool.", "score": 0.8223638534545898, "input": null, "reference_output": null, "score_result": {"score": 0.8223638534545898, "category": null}}, {"id": "93e6a397-63d3-4678-bb58-42e192ed38c5", "output": "The Bench documentation does not explicitly mention scorers for evaluating LLMs at coding tasks. However, the Bench package provides a few scorers that could be useful for this purpose:\n\n1. **ExactMatch**: This scorer can be used to check if the candidate output exactly matches the reference output, including case sensitivity. This could be useful for evaluating the correctness of code outputs.\n\n2. **Custom Scorers**: The Bench documentation mentions that you can create custom scorers to provide even more flexibility. You could potentially create a custom scorer that evaluates the correctness, style, and efficiency of the generated code.\n\nTo use these scorers for evaluating LLMs at coding tasks, you would need to create a test suite with the appropriate input text (coding prompts) and reference outputs (expected code solutions). You can then run the test suite and analyze the scores to assess the LLM's performance on the coding tasks.", "score": 0.8315142393112183, "input": null, "reference_output": null, "score_result": {"score": 0.8315142393112183, "category": null}}, {"id": "67293353-3c84-4967-810d-ee179a1ae002", "output": "To view your Bench test results, you have two options:\n\n1. Local setup:\n   - Ensure the `BENCH_FILE_DIR` environment variable is set to the location of your test run data.\n   - Run the `bench` command from the command line to launch the local Bench UI.\n   - The local UI will provide a visual interface to view and explore your test results.\n\n2. SaaS (Coming Soon):\n   - Set the environment variables `ARTHUR_BENCH_AUTOLOG`, `ARTHUR_API_URL`, and `ARTHUR_API_KEY` to connect to the Arthur platform.\n   - Your test results will be automatically logged to the Arthur platform, which will host the Bench server and provide a web-based UI to view and analyze your test data.\n\nThe documentation provides examples for both the local and SaaS setup options to help you get started with viewing your Bench test results.", "score": 0.8496863842010498, "input": null, "reference_output": null, "score_result": {"score": 0.8496863842010498, "category": null}}, {"id": "bb8aa841-074e-4b8f-aa62-ea33d91280bd", "output": "The key difference between Bench test suites and test runs is:\n\n1. Test Suites: A test suite is the overall collection of test cases that you want to evaluate your AI model or application against. It defines the input data, reference outputs, and scoring metrics to be used.\n\n2. Test Runs: A test run is the execution of a test suite against a specific candidate model or application. When you run a test suite, you provide the candidate outputs that you want to evaluate, and the test run will score those outputs against the reference data defined in the test suite.\n\nIn summary, the test suite defines the overall test framework, while the test run executes that framework against a specific candidate to generate performance metrics and results. You can run multiple test runs against the same test suite to compare different models or configurations.", "score": 0.7821615934371948, "input": null, "reference_output": null, "score_result": {"score": 0.7821615934371948, "category": null}}], "updated_at": "2024-03-26T16:07:36.445778", "created_at": "2024-03-26T16:07:36.445778", "page": null, "page_size": null, "total_pages": null, "total_count": null}