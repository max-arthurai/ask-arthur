{"id": "09d203bd-bc8e-412e-9a1e-e7fe5dc9f0b6", "name": "claude-3-haiku-20240307+nomic-ai_nomic-embed-text-v1.5@7", "test_suite_id": "1c594684-5fd1-4bba-b209-d6c321bc01ac", "test_cases": [{"id": "6631fb8f-c16e-4b51-9bdb-e46dc35dbe1f", "output": "Based on the provided context, the following enrichments are available in Arthur:\n\n- Anomaly Detection\n- Bias Mitigation\n- Explainability\n- Hot Spots\n- Token Likelihood\n\nThe context mentions that these enrichments are available as part of the Arthur platform, which provides monitoring, compliance, analysis, and development capabilities for AI applications.", "score": 0.9213869571685791, "input": null, "reference_output": null, "score_result": {"score": 0.9213869571685791, "category": null}}, {"id": "12245a16-8cc3-4cad-a0df-8d65b2ccdbb4", "output": "Based on the context provided, the document does not mention any specific model types that do not allow explainability. The focus of the document is on model schemas within the MLOps ecosystem, and it does not discuss the explainability of different model types. The context does not contain information to answer this question directly.", "score": 0.8082765340805054, "input": null, "reference_output": null, "score_result": {"score": 0.8082765340805054, "category": null}}, {"id": "907e435b-f3d1-4201-bdf3-a514a8975b2d", "output": "Based on the provided context, the Arthur platform supports the following enrichments for object detection models:\n\n1. Anomaly Detection: Arthur can detect anomalies in the object detection outputs, such as unexpected objects or changes in the detected objects over time.\n2. Bias Mitigation: Arthur can help identify and mitigate biases in the object detection model, such as demographic biases in the detected objects.\n3. Explainability: Arthur can provide explanations for the object detection model's predictions, helping users understand the model's decision-making process.\n\nThe context does not provide any example Python code, as the question is asking about the available enrichments rather than specific implementation details.", "score": 0.8151909112930298, "input": null, "reference_output": null, "score_result": {"score": 0.8151909112930298, "category": null}}, {"id": "22d619b4-c43b-4d17-9dd5-1c3d9e81b44a", "output": "Based on the provided context, the following enrichments are available for tabular multiclass classification models in Arthur:\n\n- Anomaly Detection\n- Hot Spots \n- Explainability\n- Bias Mitigation\n\nThe context states that these enrichments can be enabled for multiclass classification model types in Arthur.", "score": 0.7503336668014526, "input": null, "reference_output": null, "score_result": {"score": 0.7503336668014526, "category": null}}, {"id": "c30d8faf-8e01-4e50-b93c-e633c9da7fd1", "output": "Unfortunately, the provided context does not contain any information about restoring deleted Arthur models. The Arthur Scope FAQ covers topics such as using the platform without the Python SDK, model access requirements, data security, handling missing ground truth labels, and troubleshooting SDK errors, but it does not mention anything about restoring deleted models. Without additional context or documentation on the Arthur platform's model management capabilities, I cannot provide a substantive answer to this question.", "score": 0.8508010506629944, "input": null, "reference_output": null, "score_result": {"score": 0.8508010506629944, "category": null}}, {"id": "e9bc0fdf-b920-48eb-bce7-9d10b050a664", "output": "Based on the provided context, the Arthur Scope FAQ does not mention anything about alert levels. The FAQ covers topics such as using Arthur without the Python SDK, model access requirements, data security and privacy, handling of ground truth labels, error handling, and data drift metrics. There is no information about the specific alert levels available in Arthur.", "score": 0.7861173152923584, "input": null, "reference_output": null, "score_result": {"score": 0.7861173152923584, "category": null}}, {"id": "4040ca43-f1db-4111-9df4-124ef94eea08", "output": "Based on the provided context, the additional requirements for on-prem deployment in airgapped mode are:\n\n1. The Kubernetes cluster must have access to a local container registry and PyPI/Conda registry, as the cluster will not have internet access to pull images and packages from public registries.\n2. The SysAdmin performing the installation must have read/write access to the local container registry.\n3. All required artifacts for installing the Arthur platform, including the KOTS CLI installer, plugins, and updates, must be downloaded and made available locally, as the cluster will not have internet access.", "score": 0.8198825120925903, "input": null, "reference_output": null, "score_result": {"score": 0.8198825120925903, "category": null}}, {"id": "498e6ba4-c53d-405d-88bd-88b27aa1106f", "output": "To enable explainability for your model in Arthur, you will need to provide access to your model's `predict()` function. Arthur requires this in order to generate explanations for the model's predictions. No other specific artifacts are needed to enable explainability, but you will need to integrate your model with the Arthur SDK and register it with the platform.", "score": 0.8765877485275269, "input": null, "reference_output": null, "score_result": {"score": 0.8765877485275269, "category": null}}, {"id": "3c216b5e-f6ea-41c6-933a-a20d4bf59e08", "output": "Based on the provided context, there is no mention of KMS (Key Management Service) being required for Arthur's backup and restore capability. The document focuses on the steps to restore various components of the Arthur platform, such as the RDS Postgres database, ClickHouse data, messaging infrastructure, and enrichments, without any specific references to KMS.", "score": 0.7210307717323303, "input": null, "reference_output": null, "score_result": {"score": 0.7210307717323303, "category": null}}, {"id": "9e8c3e89-6a0c-4ae3-85d6-7a141c9bdcfe", "output": "Unfortunately, the provided context does not contain any information about benchmarking scorers for evaluating LLMs at writing summaries. The context is focused on explaining token likelihood, which is a metric for understanding the confidence of an LLM's predictions, but it does not mention any specific benchmarking tools or metrics for evaluating LLM performance on summarization tasks. Without additional context about LLM summarization evaluation, I cannot provide a more detailed answer to your question.", "score": 0.7985703945159912, "input": null, "reference_output": null, "score_result": {"score": 0.7985703945159912, "category": null}}, {"id": "1925c2f0-86e8-4e5c-8c5c-572775db7beb", "output": "Based on the context provided, Arthur will be including a scoring workflow in their open-source evaluation tool, Arthur Bench, to evaluate LLM responses to questions. The procedure they followed to manually evaluate the LLM responses in their dataset will be included as a scoring workflow in Arthur Bench, which can be used for comparing LLMs, prompts, and hyperparameters for generative text models.", "score": 0.7604497671127319, "input": null, "reference_output": null, "score_result": {"score": 0.7604497671127319, "category": null}}, {"id": "93e6a397-63d3-4678-bb58-42e192ed38c5", "output": "The Bench documentation does not explicitly mention scorers for evaluating LLMs at coding tasks. However, the Bench package provides the `ExactMatch` scorer, which can be used to compare the candidate output to a reference output. This scorer can be useful for evaluating the correctness of code generated by LLMs. Additionally, the documentation mentions that you can create custom scorers to provide more flexibility in evaluating LLM performance. To create a custom scorer for coding tasks, you would need to implement your own scoring logic, such as checking the syntax, functionality, or style of the generated code.", "score": 0.8185020089149475, "input": null, "reference_output": null, "score_result": {"score": 0.8185020089149475, "category": null}}, {"id": "67293353-3c84-4967-810d-ee179a1ae002", "output": "To view your Bench test results, you have two options:\n\n1. Local setup:\n   - Ensure the `BENCH_FILE_DIR` environment variable is set to the location of your test run data.\n   - Run the `bench` command from the command line to launch the local Bench UI.\n   - The local UI will provide a visual interface to view and explore your test results.\n\n2. SaaS (Coming Soon):\n   - Set the environment variables `ARTHUR_BENCH_AUTOLOG`, `ARTHUR_API_URL`, and `ARTHUR_API_KEY` to connect to the Arthur platform.\n   - Your test results will be automatically logged to the Arthur platform, which will host the Bench server and provide a web-based UI to view and analyze your test data.\n\nThe documentation provides examples for both the local and SaaS setup options to help you get started with viewing your Bench test results.", "score": 0.8496863842010498, "input": null, "reference_output": null, "score_result": {"score": 0.8496863842010498, "category": null}}, {"id": "bb8aa841-074e-4b8f-aa62-ea33d91280bd", "output": "The main difference between Bench test suites and test runs is:\n\n1. Test Suites: A test suite is the overall collection of test cases that you want to evaluate your AI model or application against. It defines the input data, reference outputs, and scoring metrics to be used.\n\n2. Test Runs: A test run is the execution of a test suite against a specific candidate model or application. When you run a test suite, you provide the candidate outputs that you want to evaluate, and the test run will score those outputs against the reference data defined in the test suite.\n\nIn summary, the test suite defines the overall test framework, while the test run executes that framework against a specific candidate model or application and generates the performance results.", "score": 0.7831808924674988, "input": null, "reference_output": null, "score_result": {"score": 0.7831808924674988, "category": null}}], "updated_at": "2024-03-26T16:07:41.831849", "created_at": "2024-03-26T16:07:41.831849", "page": null, "page_size": null, "total_pages": null, "total_count": null}