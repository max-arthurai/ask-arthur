{"id": "a38508fe-13e4-4799-8587-7c5b58fb232f", "name": "claude-3-haiku-20240307+nomic-ai_nomic-embed-text-v1.5@1", "test_suite_id": "5d0d8642-7bbf-4d7d-a744-cfdee7647a3a", "test_cases": [{"id": "9302872f-61dc-4092-add4-0b928fc05679", "output": "Based on the provided context, the following enrichments are available in Arthur:\n\n1. Anomaly Detection: Arthur can detect anomalies in your model's performance and data.\n2. Bias Mitigation: Arthur can help mitigate biases in your model's predictions.\n3. Explainability: Arthur can provide explanations for your model's predictions.\n\nThe context does not provide detailed information about other enrichments that may be available in Arthur.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "1a3cfeeb-c6a0-41de-9444-c609ec78bc71", "output": "Based on the context provided, the document does not mention any specific model types that do not allow explainability. The focus of the document is on model schemas within the MLOps ecosystem, and it does not discuss the explainability of different model types. The context does not contain information to answer the question \"What model types do not allow explainability?\".", "score": 1.0, "input": null, "reference_output": null, "score_result": {"score": 1.0, "category": {"name": "correct", "description": "model output is correct given the context"}}}, {"id": "2b285103-b671-43c0-8485-3253fadcc23e", "output": "Based on the provided context, the Arthur platform supports the following enrichments for object detection models:\n\n1. Anomaly Detection: Arthur can detect anomalies in the object detection outputs, such as unexpected objects or changes in the detected objects over time.\n2. Bias Mitigation: Arthur can help identify and mitigate biases in the object detection model outputs.\n3. Explainability: Arthur provides explainability features to help understand the model's decision-making process for object detection.\n\nThe context does not provide any example Python code for these enrichments, as the question is asking about the available enrichments rather than requesting specific code examples.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "640965fd-e43b-4794-9719-de37084d9221", "output": "Based on the provided context, the following enrichments are available for tabular multiclass classification models in Arthur:\n\n- Anomaly Detection\n- Hot Spots \n- Explainability\n- Bias Mitigation\n\nThe context mentions that these enrichments can be enabled for multiclass classification model types in Arthur.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "16e9a74b-faca-45ac-aea5-5fbf28ea0c85", "output": "Based on the provided context, the Arthur Scope FAQ does not mention anything about alert levels. The FAQ covers topics such as using Arthur without the Python SDK, model access requirements, data security and privacy, handling of ground truth labels, error handling, and data drift metrics. There is no information about the specific alert levels available in Arthur.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "45550df3-ab06-4bde-b929-4e84c7796b80", "output": "Based on the provided context, the key additional requirements for on-prem deployment in airgapped mode are:\n\n1. The Kubernetes cluster must have access to a local container registry, as the cluster will not have internet access to pull images from public registries.\n\n2. The Kubernetes cluster must have access to a local PyPI/Conda registry to ensure optimal utilization of platform features.\n\n3. All required artifacts, including the KOTS CLI installer, plugins, and updates, must be downloaded and made available locally, as the cluster will not have internet access.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "c8c0a65e-7374-4abe-9d68-458a7a0d48c0", "output": "To enable explainability for your model in Arthur, you will need to provide access to your model's `predict()` function. Specifically, you will need to provide the following assets:\n\n1. The model's `predict()` function - This allows Arthur to access the internal workings of your model and generate explanations for its predictions.\n2. Any necessary dependencies or libraries required by your model's `predict()` function.\n\nWith these assets, Arthur can integrate with your model and generate detailed explanations for the model's predictions, enabling you to better understand and debug your AI applications.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "15379cb5-bba6-43d1-8b2f-80b2a00d0227", "output": "Based on the provided context, there is no mention of KMS (Key Management Service) being required for Arthur's backup and restore capability. The document focuses on the steps to restore various components of the Arthur platform, such as the RDS Postgres database, ClickHouse data, messaging infrastructure, and enrichments, but does not discuss any KMS requirements.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "242d60dd-516d-4724-b515-fc5acd86f83c", "output": "Unfortunately, the provided context does not contain any information about benchmarking scorers for evaluating LLMs at writing summaries. The context is focused on explaining token likelihood, which is a metric for understanding the confidence of an LLM's predictions, but it does not mention any specific benchmarking tools or metrics for evaluating LLM performance on summarization tasks. Without additional context about LLM evaluation for summarization, I cannot provide a meaningful answer to the question.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "bde29bd5-7fc5-4b40-811f-f03f6a8eeaca", "output": "Based on the context provided, Arthur will be including a scoring workflow in their open-source evaluation tool, Arthur Bench, to evaluate LLM responses to questions. The workflow they used to manually evaluate the LLM responses in their dataset will be included as a scorer in Arthur Bench. This scorer can be used to compare the performance of different LLMs, prompts, and hyperparameters on question-answering tasks.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "7c3bdff6-414e-49b6-ac52-ad6a7d168f13", "output": "The Bench documentation does not explicitly mention scorers for evaluating LLMs at coding tasks. However, the Bench package provides a few scorers that could be useful for this purpose:\n\n1. **ExactMatch**: This scorer can be used to check if the candidate output exactly matches the reference output, ignoring capitalization differences if needed.\n\n2. **Custom Scorers**: The Bench documentation mentions that you can create custom scorers to provide even more flexibility. This could allow you to implement scorers specifically designed for evaluating LLM performance on coding tasks, such as checking for correct syntax, logical correctness, or adherence to best practices.\n\nTo use these scorers for evaluating LLMs on coding tasks, you would need to create a test suite with the appropriate input text (coding prompts) and reference outputs (expected solutions). You can then run the test suite and analyze the scores to assess the LLM's performance.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "8d479d1b-5ed7-4926-8d58-5282a8248eee", "output": "To view your Bench test results, you have two options:\n\n1. Local setup:\n   - Ensure the `BENCH_FILE_DIR` environment variable is set to the location of your test run data.\n   - Run the `bench` command from the command line to launch the local Bench UI.\n   - The local UI will provide a visual interface to view and explore your test results.\n\n2. SaaS (Coming Soon!):\n   - Set the environment variables `ARTHUR_BENCH_AUTOLOG`, `ARTHUR_API_URL`, and `ARTHUR_API_KEY` to connect to the Arthur platform.\n   - Your test results will be automatically logged to the Arthur platform, which will provide a web-based interface to view and analyze your test data.\n\nThe documentation provides examples for both the local and SaaS setup options to help you get started with viewing your Bench test results.", "score": 0.0, "input": null, "reference_output": null, "score_result": {"score": 0.0, "category": {"name": "incorrect", "description": "model output is incorrect given the context"}}}, {"id": "a88c1ebb-490c-4669-91c3-ca56bc83861e", "output": "The main difference between Bench test suites and test runs is:\n\n1. Test Suites: A test suite is a collection of test cases that are designed to test a specific functionality or feature of an AI application. It defines the input data, reference outputs, and the scoring metric to be used for evaluating the performance of the AI model.\n\n2. Test Runs: A test run is the execution of a test suite against a specific AI model or candidate. It takes the input data from the test suite, generates outputs using the candidate model, and evaluates the performance using the specified scoring metric.\n\nIn summary, a test suite defines the test cases and evaluation criteria, while a test run executes the test suite against a candidate model and reports the results.", "score": 1.0, "input": null, "reference_output": null, "score_result": {"score": 1.0, "category": {"name": "correct", "description": "model output is correct given the context"}}}], "updated_at": "2024-03-27T11:33:20.006879", "created_at": "2024-03-27T11:33:20.006879", "page": null, "page_size": null, "total_pages": null, "total_count": null}